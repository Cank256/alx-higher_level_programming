# Test valid matrix division with different divisors
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
divisor = 2
expected_result = [
    [0.5, 1.0, 1.5],
    [2.0, 2.5, 3.0],
    [3.5, 4.0, 4.5]
]
assert matrix_divided(matrix, divisor) == expected_result

matrix = [
    [10, 20, 30],
    [40, 50, 60],
    [70, 80, 90]
]
divisor = 10
expected_result = [
    [1.0, 2.0, 3.0],
    [4.0, 5.0, 6.0],
    [7.0, 8.0, 9.0]
]
assert matrix_divided(matrix, divisor) == expected_result

# Test invalid inputs
# Test case 1: Matrix contains non-numeric elements
matrix = [
    [1, 2, 'three'],
    [4, 5, 6],
    [7, 8, 9]
]
divisor = 2
try:
    matrix_divided(matrix, divisor)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test case 2: Rows of the matrix have different sizes
matrix = [
    [1, 2, 3],
    [4, 5],
    [7, 8, 9]
]
divisor = 2
try:
    matrix_divided(matrix, divisor)
except TypeError as e:
    assert str(e) == "Each row of the matrix must have the same size"

# Test case 3: Divisor is not a number
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
divisor = 'two'
try:
    matrix_divided(matrix, divisor)
except TypeError as e:
    assert str(e) == "div must be a number"

# Test case 4: Divisor is zero
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
divisor = 0
try:
    matrix_divided(matrix, divisor)
except ZeroDivisionError as e:
    assert str(e) == "division by zero"
